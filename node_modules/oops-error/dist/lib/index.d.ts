export type ErrorCategory = 'OperationalError' | 'ProgrammerError';
export interface IOopsOptions {
    name?: string;
    message: string;
    cause?: Error;
    category: ErrorCategory;
    context?: {
        [key: string]: any;
    };
}
export declare class Oops extends Error {
    id: string;
    category: string;
    context?: {
        [key: string]: any;
    };
    cause?: any;
    constructor(options: IOopsOptions);
    fullStack: () => string;
    contextValue: (key: any) => any;
}
export declare const getErrorCategory: (err: any) => ErrorCategory;
export declare const programmerErrorHandler: (message: string, context?: {}) => (err: any) => never;
export declare const operationalErrorHandler: (message: string, context?: {}) => (err: any) => never;
export declare const assert: (value: any, message: string, context?: {}) => void;
export declare const newOperationalOops: (message: string, context?: {}, cause?: Error) => Oops;
export declare const operationalOops: (message: string, context?: {}) => never;
export declare const newProgrammerOops: (message: string, context?: {}, cause?: Error) => Oops;
export declare const programmerOops: (message: string, context?: {}) => never;
export type DefensiveGet = <T>(getter: () => T) => T | string;
export declare const defensiveGet: DefensiveGet;
